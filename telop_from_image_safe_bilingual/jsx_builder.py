from __future__ import annotations

from pathlib import Path
from typing import List

from .models import TelopStyle

JSX_HEADER = """// Generated by telop_from_image_safe_bilingual
app.beginUndoGroup('telop');
"""

JSX_FOOTER = "app.endUndoGroup();\n"


def _color_array(color: List[float]) -> str:
    return "[{}]".format(",".join(f"{c:.3f}" for c in color))


def build_jsx(style: TelopStyle, jsx_path: Path, mogrt_path: Path) -> Path:
    """Build an ExtendScript file to recreate the telop and export a .mogrt."""
    lines = [JSX_HEADER]
    comp = style.comp
    lines.append(f"var comp = app.project.items.addComp('comp', {comp['width']}, {comp['height']}, 1, {comp['duration']}, {comp['fps']});\n")
    plate = style.plate
    if plate["enabled"]:
        lines.append("var shape = comp.layers.addShape();\n")

    lines.append("var textLayer = comp.layers.addText('" + (style.text or '') + "');\n")
    lines.append("var textProp = textLayer.property('Source Text');\nvar doc = textProp.value;\n")
    lines.append(f"doc.font = '{style.font_name}';\n")
    lines.append(f"doc.fontSize = {style.font_size};\n")
    lines.append(f"doc.tracking = {style.tracking};\n")
    lines.append(f"doc.fillColor = {_color_array(style.fill['color'])};\n")
    lines.append("textProp.setValue(doc);\n")

    for idx, stroke in enumerate(style.strokes):
        if idx == 0:
            lines.append(f"textLayer.property('ADBE Text Properties').property('ADBE Text Stroke Color').setValue({_color_array(stroke['color'])});\n")
            lines.append(f"textLayer.property('ADBE Text Properties').property('ADBE Text Stroke Width').setValue({stroke['width']});\n")
            lines.append("textLayer.property('ADBE Text Properties').property('ADBE Text Stroke Over Fill').setValue(1);\n")
        else:
            lines.append(
                f"var s{idx} = textLayer.duplicate();\n"
                f"s{idx}.property('ADBE Text Properties').property('ADBE Text Stroke Color').setValue({_color_array(stroke['color'])});\n"
                f"s{idx}.property('ADBE Text Properties').property('ADBE Text Stroke Width').setValue({stroke['width']});\n"
                f"s{idx}.property('ADBE Text Properties').property('ADBE Text Fill Color').setValue({_color_array(style.fill['color'])});\n"
                f"s{idx}.property('ADBE Text Properties').property('ADBE Text Fill Opacity').setValue(0);\n"
                f"s{idx}.moveToBeginning();\n"
            )

    lines.append(f"textLayer.property('Position').setValue([{style.position['x']}, {style.position['y']}]);\n")

    shadow = style.shadow
    if shadow["enabled"]:
        lines.append("var drop = textLayer.property('ADBE Effect Parade').addProperty('ADBE Drop Shadow');\n")
        lines.append(f"drop.property('ADBE Drop Shadow-0002').setValue({_color_array(shadow['color'])});\n")
        lines.append(f"drop.property('ADBE Drop Shadow-0003').setValue({shadow['opacity']});\n")
        lines.append(f"drop.property('ADBE Drop Shadow-0004').setValue({shadow['direction']});\n")
        lines.append(f"drop.property('ADBE Drop Shadow-0005').setValue({shadow['distance']});\n")
        lines.append(f"drop.property('ADBE Drop Shadow-0007').setValue({shadow['softness']});\n")

    lines.append(f"var file = new File('{mogrt_path.as_posix()}');\n" "app.project.exportAsMotionGraphicsTemplate(file, true);\n")

    lines.append(JSX_FOOTER)
    jsx_path.write_text("".join(lines), encoding="utf-8")
    return jsx_path
